name: CI

on: push # 触发时机，这里设置为每次 push 时触发

jobs:
  build_and_test:
    name: "构建与测试"
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] # 在 GitHub 提供的 Linux 和 Windows 镜像上构建
    runs-on: ${{ matrix.os }} # 使用矩阵中的操作系统

    steps:
    - name: 安装依赖（Linux）
      run: sudo apt install ninja-build
      if: matrix.os == 'ubuntu-latest' # 条件执行，仅在 Ubuntu 运行器上运行此步骤

    - name: 安装 Ninja（Windows）    # Ninja 在 GitHub 提供的镜像中不可用
      run: choco install ninja         # 所以通过 Chocolatey 安装
      if: matrix.os == 'windows-latest'

    - name: 安装 Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.5.2'  # 安装 Qt 版本

    - uses: ilammy/msvc-dev-cmd@v1 # 该操作相当于调用 vcvarsall.bat，为运行器配置最新 VS x64 环境

    - uses: actions/checkout@v4    # 实际检出源码。GH Actions 可在不需要源码的事件触发，但这里需要

    # # 手动调用 CMake 构建项目，也可以使用 Marketplace 上的 CMake Action
    # - name: 构建
    #   # 不需要设置环境变量让 CMake 找到 Qt，因为 install-qt-action 会自动配置
    #   run: cmake -S . -B build -G "Ninja Multi-Config" && cmake --build build --config Debug

    # 手动调用 CMake 配置和构建


# 这里我们手动调用CMake
    - name: 配置构建
      run: cmake -S . -B build -G "Ninja Multi-Config"

    - name: 构建 Release 版本
      run: cmake --build build --config Release

    - name: 测试（可选）
      run: cmake --build build --target test --config Release
      continue-on-error: true  # 如果没有测试，不会导致构建失败

    # 打包应用程序
    - name: 打包应用程序 (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p MyQtApp-linux
        cp build/Release/MyQtApp MyQtApp-linux/
        # 创建启动脚本
        echo '#!/bin/bash' > MyQtApp-linux/run.sh
        echo 'cd "$(dirname "$0")"' >> MyQtApp-linux/run.sh
        echo './MyQtApp' >> MyQtApp-linux/run.sh
        chmod +x MyQtApp-linux/run.sh
        tar -czf MyQtApp-linux-x64.tar.gz MyQtApp-linux/

    # 打包应用程序（Windows）
    - name: 打包应用程序 (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir MyQtApp-windows
        cp build/Release/MyQtApp.exe MyQtApp-windows/
        # 使用windeployqt部署Qt依赖
        windeployqt.exe --release --qmldir . MyQtApp-windows/MyQtApp.exe
        # 创建压缩包
        7z a MyQtApp-windows-x64.zip MyQtApp-windows/*
      shell: bash

    # 上传构建产物
    - name: 上传构建产物 (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: MyQtApp-linux-x64
        path: MyQtApp-linux-x64.tar.gz
        retention-days: 30

    - name: 上传构建产物 (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: MyQtApp-windows-x64
        path: MyQtApp-windows-x64.zip
        retention-days: 30

  # 创建GitHub Release（仅在推送标签时）
  release:
    name: "Create Release"
    needs: build_and_test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')  # 仅在推送tag时运行

    steps:
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4

    - name: 创建 Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          MyQtApp-linux-x64/*.tar.gz
          MyQtApp-windows-x64/*.zip
        generate_release_notes: true
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
