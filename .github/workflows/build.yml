name: CI

on: push # 触发时机，这里设置为每次 push 时触发

jobs:
  build_and_test:
    name: "构建与测试"
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] # 在 GitHub 提供的 Linux 和 Windows 镜像上构建
    runs-on: ${{ matrix.os }} # 使用矩阵中的操作系统

    steps:
    - name: 安装依赖（Linux）
      run: sudo apt install ninja-build
      if: matrix.os == 'ubuntu-latest' # 条件执行，仅在 Ubuntu 运行器上运行此步骤

    - name: 安装 Ninja（Windows）    # Ninja 在 GitHub 提供的镜像中不可用
      run: choco install ninja         # 所以通过 Chocolatey 安装
      if: matrix.os == 'windows-latest'

    - name: 安装 Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.2'  # 安装 Qt 版本

    - uses: ilammy/msvc-dev-cmd@v1 # 该操作相当于调用 vcvarsall.bat，为运行器配置最新 VS x64 环境

    - uses: actions/checkout@v3    # 实际检出源码。GH Actions 可在不需要源码的事件触发，但这里需要

    # 手动调用 CMake 构建项目，也可以使用 Marketplace 上的 CMake Action
    - name: 构建
      # 不需要设置环境变量让 CMake 找到 Qt，因为 install-qt-action 会自动配置
      run: cmake -S . -B build -G "Ninja Multi-Config" && cmake --build build --config Debug
